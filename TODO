+---------+
| IPS-DEV |
+---------+

Project:
* calculate and manipulate 1D-HO solutions (C++ / armadillo)
* use git, doxygen, make, cxxtest, matplotlib, remark.js

0 * introduction
0  * lecturer
0  * modules
0  * GNU/Linux quick howto
0  * scientific method
0  * good development practices
0 * development tools
0  * git
0  * GNU Make
0 TP0

1  * Doxygen
1  * CxxTest
1 * C++ scientific libraries
1  * armadillo
1 Project presentation
1 TP1

2 * development tools (continued)
2  * astyle / indent
2 * results presentation
2  * LaTeX
2  * Markdown
2  * remark.js
2 TP2

3 * python
3  * standard types
3  * branching
3  * indentation
3  * iteration and loops
3  * containers
3 TP3

4  * python as a glue
4  * bindings
4  * matplotlib
4 TP4

5 Project presentation

+----------+
| IPS-PROD |
+----------+

Project:
* calculate and manipulate nuclear local densities (C++ / armadillo)
* profile the resulting code
* use git, doxygen, make, cxxtest, matplotlib, remark.js, povray

0 * numerical techniques
0  * eigenvalue problems
0  * quadratures
0 TP0

1  * bases
1   * HO solutions
1   * FEM
1 * data visualization
1  * POVray
1 TP1

2 * optimizations
2  * vectorization
2  * loops / sums / pre-sums
2 TP2

3 * debug / profiling
3  * gdb
3  * valgrind
3  * DIY timers
3 TP3

4 * data storage
4  * mongoDB
4  * MPI-IO
4 TP4

5 Project presentation

                

* HPC project
 * overview (from idea to results)
 * applying
  * identify target supercomp
  * dimension the project
  * test the code 1 (scalability, benchmarks...)
  * example of an application
 * porting the code
  * supercomp overview (file system, modules, libs, compilers...)
  * preparatory access
   * test the code 2 (scalability, benchmarks...)
  * queues
  * restart mechanism
* post-processing
 * python + mongoDB
* data visualization
 * paraview
 * blender
* scientific libraries
 * lapack
 * MKL
 * scalapack
 * magma
 * eigen
* programming techniques
 * errors / exceptions
 * OpenMP
 * MPI master / slaves
 * threads
 * live monitoring
  * socket + API
* post-processing
 * JSON
 * python + mongoDB
 * python + MPI-IO
* data visualization
 * VTK
 * paraview plugin
 * blender plugin

# IPS project goals:

* initialize project (hierarchy of files, of classes, doxygen, Makefile, clean, git, cxxtest, data, bindings, README, LICENSE)
* derivate cylindrical HO solutions (LaTeX in doxygen), implement them, check H|p>=E|p>
* write C++ msgpack importer
* calculate the local density from a msgpack
* monitor the code performances with at least a simple timer
* num. calculate some <Q0m> values
* ana. calculate some <Q0m> values
* visualize local density in paraview, blender, povray, etc...
* use bindings in a MPI4py python script to calculate from mongoDB to ana. and num. <Q0m> values
* implement a transparent restart mechanism in the python script
* make a scalability benchmark, identify IO and CPU times
* write monitor server
* write monitor client

# PSA project goals:

* initialize project (hierarchy of files, of classes, doxygen, Makefile, clean, git, cxxtest, data, bindings, README, LICENSE)
* derivate cylindrical HO solutions (LaTeX in doxygen), implement them, check H|p>=E|p>
* write C++ msgpack importer
* calculate the local density from a msgpack
* monitor the code performances with at least a simple timer
* calculate the local density from a msgpack
* num. calculate some <Q0m> values
* ana. calculate some <Q0m> values
* visualize local density in paraview, blender, povray, etc...
* use bindings in a MPI4py python script to calculate from mongoDB to ana. and num. <Q0m> values
* implement a transparent restart mechanism in the python script
* make a scalability benchmark, identify IO and CPU times

BUG: trailing empty code lines are removed by markdown parser in remark.js
TODO: reduce size of terminal in slide 47 (#63)
